<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>SOA on tedn.life</title>
    <link>http://tedn.life/tags/soa/</link>
    <description>Recent content in SOA on tedn.life</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Sun, 16 Aug 2020 16:11:59 +0100</lastBuildDate>
    <atom:link href="http://tedn.life/tags/soa/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Effective Android - Using Apache CXF to access SOAP services</title>
      <link>http://tedn.life/2009/09/21/effective-android-using-apache-cxf-to-access-soap-services/</link>
      <pubDate>Mon, 21 Sep 2009 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2009/09/21/effective-android-using-apache-cxf-to-access-soap-services/</guid>
      <description>A year ago I developed a small set of demos to show how to&lt;a href=&#34;http://blog.tritsch.org/2008/04/apache-cxf-generates-client-side-soap.html&#34; target=&#34;_blank&#34;&gt; access SOAP services from the iPhone&lt;/a&gt;. To do this I used a very interesting feature of Apache CXF: The ability to generate a complete &lt;a href=&#34;http://cwiki.apache.org/CXF20DOC/javascript-clients.html&#34;&gt;JavaScript client-side SOAP-stack&lt;/a&gt; on the fly.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I just finished an update/upgrade of this demo to show &lt;a href=&#34;http://www.flickr.com/photos/rolandtritsch/3601394870/&#34;&gt;that it also works with the Android Phone&lt;/a&gt;. I also ported it to maven, means installing, building and running the demo is much easier now. The source code and the maven build environment is available on &lt;a href=&#34;https://github.com/rolandtritsch/iPhone-Android-Apache-CXF-Soap-Services&#34; target=&#34;_blank&#34;&gt;GitHub&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Enjoy :). &lt;/div&gt;</description>
    </item>
    <item>
      <title>ACCU 2009 - Slides are available</title>
      <link>http://tedn.life/2009/06/20/accu-2009-slides-are-available/</link>
      <pubDate>Sat, 20 Jun 2009 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2009/06/20/accu-2009-slides-are-available/</guid>
      <description>A couple of weeks ago I attended &lt;a href=&#34;http://accu.org/index.php/conferences&#34;&gt;ACCU 2009&lt;/a&gt; to deliver a talk on &#34;&lt;a href=&#34;http://accu.org/index.php/conferences/accu_conference_2009/accu2009_sessions#RESTful%20Services%20and%20Distributed%20OSGi%20-%20Friends%20or%20Foes&#34;&gt;RESTful Services and Distributed OSGi - Friends or Foes&lt;/a&gt;&#34; and &#34;&lt;a href=&#34;http://accu.org/index.php/conferences/accu_conference_2009/accu2009_sessions#AJAX%20for%20Mobile%20Devices%20-%20Using%20Apache%20Projects%20to%20get%20the%20job%20done&#34;&gt;AJAX for Mobile Devices - Using Apache Projects to get the job done&lt;/a&gt;&#34;. The conference was very well organized (thanks Giovanni) and took place in the beautiful city of Oxford. The format (keynote presentations and smaller breakout sessions) allowed for a good mix of thought-provoking presentations and good discussions. The audience was made up from very-experienced software-engineers and no-BS project-mangers.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;My most favorite presentation/keynote was delivered by &lt;a href=&#34;http://accu.org/index.php/conferences/accu_conference_2009/accu2009_sessions#The%20Benefits%20of%20Abstraction%20in%20Patterns&#34;&gt;Linda Rising (The Benefits of Abstraction in Patterns)&lt;/a&gt;. She talked about the potential of patterns going beyond the ability to put structure into the domain of software engineering.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I am looking forward to learn about the agenda for next year.&lt;/div&gt;</description>
    </item>
    <item>
      <title>FUSEforge Lightsaber/Lightsabre - Research on Asynchronous Distributed OSGi (for Jedi&#39;s :))</title>
      <link>http://tedn.life/2009/06/09/fuseforge-lightsaber/lightsabre-research-on-asynchronous-distributed-osgi-for-jedis/</link>
      <pubDate>Tue, 09 Jun 2009 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2009/06/09/fuseforge-lightsaber/lightsabre-research-on-asynchronous-distributed-osgi-for-jedis/</guid>
      <description>The &lt;a href=&#34;http://cxf.apache.org/distributed-osgi.html&#34;&gt;Distributed OSGi spec (RFC 119)&lt;/a&gt; is coming along nicely, means now might be a good time to raise the head and start to think about what might come next. A couple of month ago &lt;a href=&#34;http://coderthoughts.blogspot.com/&#34;&gt;David&lt;/a&gt;, &lt;a href=&#34;http://romanroe.blogspot.com&#34;&gt;Roman&lt;/a&gt; and &lt;a href=&#34;http://www.tritsch.org/&#34;&gt;myself&lt;/a&gt; got together and concluded to set up a research project on the alternatives available to potentially extend the Distributed OSGi spec with some asynchronous messaging concepts/capabilities.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The research is still ongoing, but the intermediate results (including a first demo!!!) are now available on &lt;a href=&#34;http://fusesource.com/forge/&#34;&gt;FUSEforge&lt;/a&gt; (Project &lt;a href=&#34;http://fusesource.com/forge/projects/LIGHTSABRE&#34;&gt;Lightsabre&lt;/a&gt;). &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The demo will also be presented at &lt;a href=&#34;http://www.osgi.org/DevConEurope2009/HomePage&#34;&gt;OSGi DevCon Europe&lt;/a&gt;. Maybe (another) reason to attend. Enjoy and stay tuned.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Orchestrating the orchestration - EIP vs. BPEL vs. BPML</title>
      <link>http://tedn.life/2009/01/23/orchestrating-the-orchestration-eip-vs.-bpel-vs.-bpml/</link>
      <pubDate>Fri, 23 Jan 2009 12:46:00 +0000</pubDate>
      <guid>http://tedn.life/2009/01/23/orchestrating-the-orchestration-eip-vs.-bpel-vs.-bpml/</guid>
      <description>Occasionally (and in any case not often enough) I am having diner or lunch (or any another excuse) to meet my dear friend &lt;a href=&#34;http://www.griegers.de/iweb-griegers.de/Home.html&#34;&gt;Klaus Grieger&lt;/a&gt;. He is a Principal Architect with &lt;a href=&#34;http://www.cimt-ag.de/Software-Development.8.0.html?&amp;amp;L=2&#34;&gt;CIMT AG&lt;/a&gt;. Klaus is what I would call a &#34;deep thinker&#34;. Discussions with him are in between interesting, challenging, invigorating and exhausting :).&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The topic of the Christmas Lunch (we had the choice between &lt;a href=&#34;http://www.snack-point.com/&#34;&gt;&#34;The best Worscht in Town&#34;&lt;/a&gt; (Worscht is Hessian Slang for sausage) and &lt;a href=&#34;http://www.eatchacha.com/&#34;&gt;&#34;Positive Eating&#34;&lt;/a&gt; and we did the right thing) was his observation that there is good news and bad news when it comes to the topic of (services) orchestration: the (from my point of view) good news is that more and more companies start to use orchestration concepts to introduce a cleaner separation of concern to their (service-oriented) architectures. The bad news is that a lot of customers seem to be confused what orchestration is (e.g. &#34;orchestration is BEPL&#34;) and how to use/implement it.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Before we start we should probably introduce a couple of standards, abbreviations and concepts:&#xA;&#xA;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;*&lt;a href=&#34;http://en.wikipedia.org/wiki/Enterprise_Integration_Patterns&#34;&gt;EIP&lt;/a&gt; - Enterprise Integration Patterns - A set of design patterns to design, build and deploy messaging solutions for distributed systems. Based on the &lt;a href=&#34;http://books.google.com/books?id=dH9zp14-1KYC&amp;amp;dq=enterprise+integration+pattern&amp;amp;printsec=frontcover&amp;amp;source=bn&amp;amp;hl=en&amp;amp;sa=X&amp;amp;oi=book_result&amp;amp;resnum=5&amp;amp;ct=result&#34;&gt;book&lt;/a&gt; by Gregor Hophe and Bobby Woolf. &lt;/div&gt;&lt;div&gt;*&lt;a href=&#34;http://en.wikipedia.org/wiki/Domain-specific_programming_language&#34;&gt;DSL&lt;/a&gt; - Domain Specific Language - A DSL is a programming language dedicated to a specific problem domain. There are solutions available to &lt;a href=&#34;http://camel.apache.org/index.html&#34;&gt;describe EIPs with DSLs&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;*(WS-)&lt;a href=&#34;http://en.wikipedia.org/wiki/Business_Process_Execution_Language&#34;&gt;BPEL&lt;/a&gt; - Business Process Execution Language - A language to describe the orchestration of (web-)services.&lt;/div&gt;&lt;div&gt;*&lt;a href=&#34;http://en.wikipedia.org/wiki/Business_Process_Modeling_Language&#34;&gt;BPML&lt;/a&gt; - Business Process Modeling Language - A superset of BPEL. More suitable to describe workflows. &lt;/div&gt;&lt;div&gt;*&lt;a href=&#34;http://en.wikipedia.org/wiki/Business_Process_Modeling_Notation&#34;&gt;BPMN&lt;/a&gt; - Business Process Management Notation - BPEL does not define a/the way to describe the business processes in a graphical way. This is addressed by BPMN. You can &lt;a href=&#34;http://www.bpm.fit.qut.edu.au/projects/babel/tools/&#34;&gt;generate BPEL from BPMN&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There are also a couple of &lt;a href=&#34;http://www.nettab.org/2005/docs/NETTAB2005_Ross-TalbotOral.pdf&#34;&gt;good discussions&lt;/a&gt; available on &lt;a href=&#34;http://www.infoq.com/news/2008/09/Orchestration&#34;&gt;orchestration vs. cheography&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;My suggestion is to structure the discussion by introducing different levels of orchestration:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;*Component-Level/Microflow Orchestration - within a service&lt;/div&gt;&lt;div&gt;*Services-Level/Business-Process Orchestration - between services, but no interactions with humans and no long-running processes/transactions&lt;/div&gt;&lt;div&gt;*&lt;a href=&#34;http://en.wikipedia.org/wiki/Workflow&#34;&gt;Workflows&lt;/a&gt; - between services, including interactions with humans (e.g. approvals, etc.)&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The big question is, if BPEL is the silver bullet for all of these and the answer for me is clearly no. Using BPEL to do component-level orchestration is clearly overkill. EIPs (using a java-based DSL) are much better suited to get this job done. BPEL has also its &lt;a href=&#34;http://soa.sys-con.com/node/204417&#34;&gt;limitations&lt;/a&gt; when it comes to the description of workflows. Using BPML to implement/describe your workflows might be a better choice.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;But BPEL is clearly the language of choice when it comes to the orchestration of services in a SOA. At the same time, even this decision should not be taken lightly. One of the cited main advantages of using BPEL (and the tools that need to come with it) is the ability to design, change and maintain business processes in a graphical way (including the claim that this can be done by your business domain experts). My question is: do you really need this? How often do your business processes or more specifically the orchestration of the processes change? Once a week? Once a month? Once a year? If it is the later, you might want to reconsider the decision to introduce BPEL (and all of the overhead that comes with it) to your project/company, since it might be easier to just write two pages of JAVA code and you are done.   &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Executive Summary: I can recommend to have lunch in the Cha Cha. Good fresh food. Not to heavy. On the topic of orchestration I recommend a practical approach: start buttom up. Use DSL-based EIP as much as possible, before you use BEPL-based services-orchestration and/or BPML-based workflows.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Apache CXF vs. Axis 2 - The current state of affairs or The missing book</title>
      <link>http://tedn.life/2008/12/07/apache-cxf-vs.-axis-2-the-current-state-of-affairs-or-the-missing-book/</link>
      <pubDate>Sun, 07 Dec 2008 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2008/12/07/apache-cxf-vs.-axis-2-the-current-state-of-affairs-or-the-missing-book/</guid>
      <description>(Blogging from the plane again. This time on my way to the Progress &lt;br /&gt;Sales Kickoff in Miami.)&lt;p&gt;The other day I stumbled over a &lt;a href=&#34;http://www.slideshare.net/itemis/axis2-vs-cxf-high-noon-apache-presentation/&#34;&gt;good presentation&lt;/a&gt;&lt;br /&gt;from &lt;a href=&#34;http://www.falkoriemenschneider.de/index.html&#34;&gt;Falko Riemenschneider&lt;/a&gt;. The high-level summary is ...&lt;/p&gt;&lt;p&gt;* Axis 2 is not as easy to use as CXF, but is more ubiquitous in the &lt;br /&gt;marketplace (and got better documentation, including a book in german)&lt;br /&gt;* CXF is a very well developed piece of software, but needs more &lt;br /&gt;people using it (and needs more/better documentation, including a book &lt;br /&gt;in any language, but preferably in english)&lt;/p&gt;</description>
    </item>
    <item>
      <title>The iPhone screen - Is it a problem or a solution?</title>
      <link>http://tedn.life/2008/10/05/the-iphone-screen-is-it-a-problem-or-a-solution/</link>
      <pubDate>Sun, 05 Oct 2008 12:01:00 +0000</pubDate>
      <guid>http://tedn.life/2008/10/05/the-iphone-screen-is-it-a-problem-or-a-solution/</guid>
      <description>Lot&#39;s of interesting exciting stuff is going to happen with FUSE over the next couple of month. &lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Especially on the tooling side. The other day I was riding in the car with &lt;a href=&#34;http://oisinh.wordpress.com/&#34;&gt;Oisin Hurley&lt;/a&gt; (Head of Tool Development for FUSE) and we discussed the value of having NOT a lot of screen real-estate, because it really makes you think about what the problem is the user wants/needs to solve and how you can guide the user through that process.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;There is a good video-cast available from Apple, which talks about&lt;a href=&#34;http://developer.apple.com/iphone/index.action&#34;&gt; the principles of good UI design for the iPhone&lt;/a&gt;. I believe these principles are good principles regardless how much screen real-estate you have. To that extend designing UIs for limited screen real-estate is more a solution than a problem. It creates the right attitude :).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Other opinions? Thoughts?&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Complex Event Processing - An exiting (new) frontier</title>
      <link>http://tedn.life/2008/10/05/complex-event-processing-an-exiting-new-frontier/</link>
      <pubDate>Sun, 05 Oct 2008 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2008/10/05/complex-event-processing-an-exiting-new-frontier/</guid>
      <description>Through the merger (:)) with Progress, I got exposed to the new exciting field of (Real-Time) &lt;a href=&#34;http://en.wikipedia.org/wiki/Complex_Event_Processing&#34;&gt;Complex Event Processing&lt;/a&gt; (CEP). There are a couple of obvious use cases in finance (e.g. algorithmic stock trading) and manufacturing (e.g.  detecting possible problems in the assembly line, which might effect your just-in-time service-level-agreements).&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Complex Event Processing or Intelligent Event Correlation is not what excites me. That was/is also possible using large data-warehouses and suitable data-mining solutions, but then you learn about it after the fact. It is not so much Complex Event Processing, it is more Complex Event Analysis. &lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;What excites me is the real-time aspect. The possibility to re-act to a set of correlated events as they happen.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The longer I think about it the more use-cases I see. Last month a large (if not the largest) utility provider world-wide visited us in Dublin for a 4-day SOA workshop. Among other things, they are looking for a solution to detect failures in the power grid before they happen or narrow down the location of the failure (faulty transformer) after it happens (e.g. to get a repair team onsite faster).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Last night I found a talk on Google Talks describing a solution for &lt;a href=&#34;http://www.youtube.com/watch?v=6PiMimSrP7A&#34;&gt;Device-free Passive Localization for Wireless Environments&lt;/a&gt;. Another interesting use-case.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;CEP is everywhere. I am dying to find out, what the value of a solution for this kind of problems is.&lt;/div&gt;</description>
    </item>
    <item>
      <title>Embedded Software Engineering - Can we avoid another software crisis</title>
      <link>http://tedn.life/2008/08/12/embedded-software-engineering-can-we-avoid-another-software-crisis/</link>
      <pubDate>Tue, 12 Aug 2008 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2008/08/12/embedded-software-engineering-can-we-avoid-another-software-crisis/</guid>
      <description>The term &#34;&lt;a href=&#34;http://en.wikipedia.org/wiki/Software_crisis&#34;&gt;software crisis&lt;/a&gt;&#34; was coined 1968  by F.L. Bauer during the first NATO Software Engineering Conference  in Garmisch, Germany and was used by Dijkstra in his very famous lecture on &#34;The humble programmer&#34;:&lt;br /&gt;&lt;br /&gt; &lt;span style=&#34;font-style: italic;&#34;&gt;    [The major cause of the software crisis is] that the machines have become several orders of magnitude more powerful! To put it quite bluntly: as long as there were no machines, programming was no problem at all; when we had a few weak computers, programming became a mild problem, and now we have gigantic computers, programming has become an equally gigantic problem. &lt;/span&gt;&lt;br /&gt;&lt;br /&gt;             – &lt;cite&gt;Edsger Dijkstra, The Humble Programmer&lt;br /&gt;&lt;/cite&gt;&lt;br /&gt;Right now there are lots of people who are saying two things: First, embedded devices and embedded software will change and transform our way of life in a similar or even stronger way than the arrival of the internet and second, the resulting software engineering challenges are huge.&#xA;&#xA;&lt;br /&gt;&lt;br /&gt;There are a lot of drivers/trends behind this, but two of the more critical ones are the &lt;a href=&#34;http://www.sdtimes.com/SearchResult/31938&#34;&gt;arrival of multi-core processor architectures&lt;/a&gt; for embedded devices and the resulting increase in processing power that comes with it (see quote above :)). And secondly the increasing demand to make embedded devices talk to each other (e.g. make Electronic Control Units (ECUs) on the car talk to each other and then make cars talk to each other).&lt;br /&gt;&lt;br /&gt;The lack of abstraction that we have in embedded software engineering makes more than 50% of all embedded software projects being later, over budget or not deliver on expectations.&lt;br /&gt;&lt;br /&gt;This sounds and looks like a first class  software (engineering) crisis. What do we do?&lt;br /&gt;&lt;br /&gt;Killing the problem with people (e.g. throw more people at the problem) is a very popular approach, especially with the emergence of cheap off-shore development centers in India and other places, but creates a huge liability, because over time it does not scale very well and the management and maintenance burden has the potential to become an even bigger problem.&lt;br /&gt;&lt;br /&gt;More thoughtful approaches first segment the embedded market from a requirements point of view and then look for much more systematic approaches to address the requirements in the given segment. One way to segment the market would be along the lines of the real-time requirements. Working assumption would be that there is a hard real-time market, a soft real-time market and an embedded market (no real-time requirements, but the software must run on devices with limited CPU and memory capabilities).&lt;br /&gt;&lt;br /&gt;The segment with the strongest growth is the last one. Addressing the software engineering issues in this segment will give us the biggest bang for the buck.&lt;br /&gt;&lt;br /&gt;One way to go about it is to use existing approaches that have (kind of) worked for the first two (real-time) segments and also use them in the embedded space, e.g. using integrated tool-chains to generate a lot of the source code (also known as Model-Driven Software-Development (MDSD)). This gives you good initial results in terms of productivity, but has the potential to create hard to maintain, monolithic, tightly-coupled monster systems.&lt;br /&gt;&lt;br /&gt;The most &lt;a href=&#34;http://www.mil-embedded.com/articles/id/?3046&#34;&gt;promising approach&lt;/a&gt; right now is to introduce the idea of Software Product Lines (SPLs) to the domain of embedded software engineering and combine it with MDSD. This will give you the productivity gains you are looking for, but will also allow you to enforce a/the necessary level of reuse to ensure the long-term maintainability of the system.&lt;br /&gt;&lt;br /&gt;In that context abstractions become pivotal. Without abstractions there is no way to create good boundaries for reuse. The first level of abstraction is the operating system and here is good news, because more and more embedded systems are based on standard operating systems (e.g. embedded Linux). But the layer above that is still under construction. What is needed is a platform that will allow you to build business-level software components and integrate them on the device and/or even reuse them over device boundaries.&lt;br /&gt;&lt;br /&gt;Interesting efforts in this context are ...&lt;br /&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;http://www.osgi.org/Main/HomePage&#34;&gt;OSGi&lt;/a&gt; - a component deployment platform for embedded devices for components and services implemented in JAVA&lt;/li&gt;&lt;li&gt;The Virtual Function Bus (VFB) in &lt;a href=&#34;http://www.autosar.org&#34;&gt;AUTOSAR&lt;/a&gt; - a common software infrastructure  for automotive systems of all vehicle domains based on standardized interfaces&lt;/li&gt;&lt;li&gt;Various embedded software engineering platforms for mobile devices like &lt;a href=&#34;http://www.limofoundation.org/&#34;&gt;LiMo&lt;/a&gt;, &lt;a href=&#34;http://www.moblin.org/&#34;&gt;Moblin&lt;/a&gt; and Android&lt;br /&gt;&lt;/li&gt;&lt;/ul&gt;Complementary to these efforts you need a way to distribute/access these components over process or even hardware boundaries. The IONA Professional Services Organization has implemented a solution called Artix/E, that provides a transport-independent, high-performance, component platform for the embedded market.&lt;br /&gt;&lt;br /&gt;Can we avoid the embedded software crisis? Yes, we can! &lt;a href=&#34;http://web.me.com/potsuntoinu/Mr_Lee/SOA_DNA/SOA_DNA.html&#34;&gt;Check it out&lt;/a&gt;.</description>
    </item>
    <item>
      <title>FUSE Master Class Series - Hidden Gem</title>
      <link>http://tedn.life/2008/05/23/fuse-master-class-series-hidden-gem/</link>
      <pubDate>Fri, 23 May 2008 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2008/05/23/fuse-master-class-series-hidden-gem/</guid>
      <description>A couple of weeks ago, I published the first 3 videos of the &lt;a href=&#34;http://open.iona.com/wiki/display/ProdInfo/FUSE+Master+Class+Series&#34;&gt;FUSE Master Class Series&lt;/a&gt; on the &lt;a href=&#34;http://open.iona.com&#34;&gt;open.iona.com&lt;/a&gt; wiki. Sooner or later we might link to it from the top page, but for the time being they are hidden gems :). The videos are also available from &lt;a href=&#34;http://www.tritsch.org/Podcast/Podcast.html&#34;&gt;my homepage&lt;/a&gt;.</description>
    </item>
    <item>
      <title>Apache-CXF generates client-side SOAP stack for the iPhone</title>
      <link>http://tedn.life/2008/04/13/apache-cxf-generates-client-side-soap-stack-for-the-iphone/</link>
      <pubDate>Sun, 13 Apr 2008 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2008/04/13/apache-cxf-generates-client-side-soap-stack-for-the-iphone/</guid>
      <description>Yep. It was inevitable. Sooner or later we need to talk about the iPhone.&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And there is a lot to talk about ...&#xA;&#xA;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;the innovative hardware&lt;/li&gt;&lt;li&gt;the business model behind it&lt;/li&gt;&lt;li&gt;the market this device might be able to create&lt;/li&gt;&lt;li&gt;and a lot of other disruptive changes that come with it&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;But today I just want to talk about a neat feature that I discovered in &lt;a href=&#34;http://cwiki.apache.org/CXF/&#34;&gt;Apache-CXF&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;In January I was looking for ways to &lt;marketing&gt;make the mobile device a first-class citizen in a distributed SOA&lt;/marketing&gt;. Right now, there are probably three platforms types that you can consider when it comes to mobile devices and the integration of mobile devices with (SOA) backend systems:&lt;/div&gt;&lt;div&gt;&lt;ul&gt;&lt;li&gt;Native - means you are using a platform SDK (e.g. .Net, Symbian, iPhone SDK) and write applications directly for a given platform.&lt;br /&gt;&lt;/li&gt;&lt;li&gt;JAVA - means you are using the JAVA ME platform. Potentially/Hopefully in combination with an OSGi container.&lt;/li&gt;&lt;li&gt;Browser - means you are using a browser and implement your application as (AJAX-based) WebApplications (XHTML, CSS, JavaScript (with XmlHttpRequest objects).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Right now, you can develop applications for the iPhone using option 1 and 3. Option 2 is not an option, because there is &lt;a href=&#34;http://www.javalobby.org/java/forums/t88464.html&#34;&gt;no JVM&lt;/a&gt; for the iPhone (but &lt;a href=&#34;http://www.infoworld.com/article/08/03/07/sun-iphone-java_1.html&#34;&gt;SUN&lt;/a&gt; recently announce that this will change later in the year :)).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Option 3 got a lot of merits, but leaves you with the daunting task to write all of the JavaScript marshaling code yourself :(.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;And here is where the miracle happens: The next version of Apache-CXF (2.1) has a feature that allows you to &lt;a href=&#34;http://cwiki.apache.org/CXF20DOC/javascript-clients.html&#34;&gt;generate JavaScript client-side code for WebServices&lt;/a&gt;. Either from an WSDL file or from annotated JAVA source code or dynamically at runtime.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;span class=&#34;Apple-style-span&#34; style=&#34;font-weight: bold;&#34;&gt;It makes writing WebApplications for the iPhone so much easier.&lt;/span&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;I have ported some of the CXF demos to the iPhone. The podcast, the presentation and the source code is available on &lt;a href=&#34;http://open.iona.com/wiki/display/ProdInfo/FUSE+Master+Class+Series&#34;&gt;open.iona.com&lt;/a&gt; and on &lt;a href=&#34;http://www.tritsch.org/Podcast/044D9C8C-29A6-4C38-96F8-933A3F9E3335.html&#34;&gt;www.tritsch.org&lt;/a&gt;.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Check it out. Feedback welcome.&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;</description>
    </item>
  </channel>
</rss>
