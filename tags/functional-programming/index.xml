<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Functional-Programming on tedn.life</title>
    <link>http://tedn.life/tags/functional-programming/</link>
    <description>Recent content in Functional-Programming on tedn.life</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Tue, 11 Jan 2022 07:28:36 +0000</lastBuildDate>
    <atom:link href="http://tedn.life/tags/functional-programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Reconnecting to RabbitMQ with AMQP in Elixir</title>
      <link>http://tedn.life/2021/10/26/reconnecting-to-rabbitmq-with-amqp-in-elixir/</link>
      <pubDate>Tue, 26 Oct 2021 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2021/10/26/reconnecting-to-rabbitmq-with-amqp-in-elixir/</guid>
      <description>&lt;p&gt;Updated (2022-01-01): Added &lt;code&gt;stage&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;At Community we are building a platform that will allow you to have&#xA;meaningful conversations with large audiences &amp;hellip; at scale!!!&lt;/p&gt;&#xA;&lt;p&gt;The architectural backbone is a shared-nothing micro-services&#xA;architecture, that uses an event-bus for state propagation.&lt;/p&gt;&#xA;&lt;p&gt;To avoid any kind of 2-phase-commit shenanigans we are publishing&#xA;events at-least-once (not exactly-once). That means our services need&#xA;to be able to and are able to deal with dublicated events gracefully&#xA;(by ignoring them).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Effective Programming with Scala(3)</title>
      <link>http://tedn.life/2021/06/02/effective-programming-with-scala3/</link>
      <pubDate>Wed, 02 Jun 2021 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2021/06/02/effective-programming-with-scala3/</guid>
      <description>&lt;p&gt;Just finished the brand new &lt;a href=&#34;https://www.coursera.org/learn/effective-scala&#34;&gt;Effective Programming with Scala&lt;/a&gt; course on Coursera.&lt;/p&gt;&#xA;&lt;img src=&#34;http://tedn.life/images/2021-06-02-effective-scala/cert.png&#34; style=&#34;display:block; margin-right:auto; margin-left:auto;&#34; width=&#34;80%&#34; hspace=&#34;1%&#34; vspace=&#34;1%&#34;/&gt;&#xA;&lt;p&gt;It is a beginners course and it is excellent for beginners. Good introduction to Scala and also into the basics of functional programming.&lt;/p&gt;&#xA;&lt;p&gt;But &amp;hellip; for me the main attraction was that the course is based on (and is using) Scala3, means even if you are a seasoned Scala2 software engineer (and/or have not written Scala code in a while), this course is an excellent refresher that will allow you to grasp the essence of why/how Scala3 is different from Scala2 in the shortest possible time (I was playing the videos on 2x and was able to do all 6 weeks in 6x3=18 hours; and used the exercices to make my IDE (emacs/metals) work with Scala3).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some more fun with Scala3</title>
      <link>http://tedn.life/2021/05/15/some-more-fun-with-scala3/</link>
      <pubDate>Sat, 15 May 2021 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2021/05/15/some-more-fun-with-scala3/</guid>
      <description>&lt;p&gt;Scala3 is &lt;a href=&#34;https://www.scala-lang.org/blog/2021/05/14/scala3-is-here.html&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In my earlier &lt;a href=&#34;https://tedn.life/2021/05/01/more-fun-with-scala3&#34;&gt;post&lt;/a&gt; I saw some weird performance differences between Scala2 and Scala3 (RC3) and felt (obviously) compelled to run &lt;a href=&#34;https://docs.google.com/spreadsheets/d/14wLxVAdPpnWcp2c7Sy_tr6PVnBUU17fx39EExUrtbfs/edit?usp=sharing&#34;&gt;the benchmark again&lt;/a&gt; against 3.0.0.&lt;/p&gt;&#xA;&lt;img src=&#34;http://tedn.life/images/2021-05-01-more-scala3/bench2.png&#34; style=&#34;display:block; margin-right:auto; margin-left:auto&#34; width=&#34;80%&#34; hspace=&#34;1%&#34; vspace=&#34;1%&#34;/&gt;&#xA;&lt;p&gt;And &amp;hellip; big surprise: Everything is back to normal. Scala3 is as fast as Scala2.&lt;/p&gt;&#xA;&lt;p&gt;The big differences come from very small numbers (e.g. Day13). The biggest (reproducible) differences is on Day3(part1): 112 msecs vs. 255 msecs. If I am getting really bored one day I might take a look at it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>More fun with Scala3</title>
      <link>http://tedn.life/2021/05/01/more-fun-with-scala3/</link>
      <pubDate>Sat, 01 May 2021 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2021/05/01/more-fun-with-scala3/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Note: Look &lt;a href=&#34;https://tedn.life/2021/05/15/some-more-fun-with-scala3&#34;&gt;here&lt;/a&gt; for 3.0 benchmark numbers&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;The release of Scala3 is &lt;a href=&#34;https://contributors.scala-lang.org/t/scala3-rc3-is-planned/5006&#34;&gt;imminent&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;In April I ported/migrated &lt;a href=&#34;https://github.com/NinesStack/nmesos&#34;&gt;nmesos&lt;/a&gt; from Scala2 to Scala3 and I just did a quick benchmark to see what Scala3 is doing to my &lt;a href=&#34;https://adventofcode.com&#34;&gt;Advent-of-Code&lt;/a&gt; implementation from &lt;a href=&#34;https://github.com/rolandtritsch/scala-aoc-2017/tree/scala3&#34;&gt;2017&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Initially I was wondering (and maybe a little bit afraid) how difficult migrating to Scala3 will be (and what problems I will be running into).&lt;/p&gt;&#xA;&lt;p&gt;The good news is that migrating to Scala3 is not difficult at all. Mainly because of the Scala2/Scala3 &lt;a href=&#34;https://docs.scala-lang.org/scala3/guides/migration/compatibility-intro.html&#34;&gt;interoperability&lt;/a&gt;, which means that as long as you are on Scala &lt;code&gt;2.13&lt;/code&gt; you are more than half-way there.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Scala 3 is ... gluten-free!!!</title>
      <link>http://tedn.life/2021/02/21/scala-3-is-...-gluten-free/</link>
      <pubDate>Sun, 21 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2021/02/21/scala-3-is-...-gluten-free/</guid>
      <description>&lt;p&gt;A couple of month ago I started to have stomach cramps. First it was only once week, but then it was more or less constant.&lt;/p&gt;&#xA;&lt;p&gt;Funny enough I had to find out that (even) late(r) in life you &lt;a href=&#34;https://www.everydayhealth.com/news/developing-celiac-later-life-can-you-become-gluten-intolerant/&#34;&gt;can &amp;ldquo;become&amp;rdquo; gluten-sensitive/-intolerant&lt;/a&gt;. Means &amp;hellip; a couple of weeks ago I got myself tested and changed my diet (to (mostly) gluten-free) and (big surprise !!!) &amp;hellip; after 3 days I was pain free!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Haskell &#43; Beam = Hamler (III)</title>
      <link>http://tedn.life/2021/02/01/haskell--beam-hamler-iii/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2021/02/01/haskell--beam-hamler-iii/</guid>
      <description>&lt;p&gt;Here comes part III of the &lt;a href=&#34;https://tedn.life/2020/12/15/haskell-beam-hamler-i/&#34;&gt;Hamler blog post series&lt;/a&gt; &amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;One of the observations was that for/on Day21 hamler ~6000 times slower than haskell, where in general we where able to see that it was 5-20 times slower.&lt;/p&gt;&#xA;&lt;p&gt;Just looked into this a little bit and there is good news and bad news. The good news is I found something.&lt;/p&gt;&#xA;&lt;p&gt;I can make the hamer solution run 10 times faster by changing the implementation of part1 from &amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Haskell &#43; Beam = Hamler (II)</title>
      <link>http://tedn.life/2021/01/18/haskell--beam-hamler-ii/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2021/01/18/haskell--beam-hamler-ii/</guid>
      <description>&lt;p&gt;Here comes part II of the &lt;a href=&#34;https://tedn.life/2020/12/15/haskell-beam-hamler-i/&#34;&gt;Hamler blog post series&lt;/a&gt; &amp;hellip;&lt;/p&gt;&#xA;&lt;p&gt;For this year&amp;rsquo;s &lt;a href=&#34;https://adventofcode.com/2020&#34;&gt;Advent-of-Code&lt;/a&gt; I wanted to take a look at &lt;a href=&#34;https://www.hamler-lang.org/&#34;&gt;Hamler&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;I just finished implementing all of the part-1 solutions in &lt;a href=&#34;https://github.com/rolandtritsch/hamler-aoc-2020&#34;&gt;Hamler&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;img src=&#34;http://tedn.life/images/2021-01-18-hamler-aoc-II/aoc-day25.png&#34; style=&#34;float:right&#34; width=&#34;50%&#34; hspace=&#34;1%&#34; vspace=&#34;1%&#34;/&gt;&#xA;&lt;p&gt;I had to skip Day 20 (the seamonster), because Hamler only supports a very small/limited number of packages, which means I would have needed to write a lot of code before I would have been able to tackle the actual problem.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Haskell &#43; Beam = Hamler (I)</title>
      <link>http://tedn.life/2020/12/15/haskell--beam-hamler-i/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2020/12/15/haskell--beam-hamler-i/</guid>
      <description>&lt;p&gt;Hamler Blog Post Series &amp;hellip;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Hamler (I) - First week (this post)&lt;/li&gt;&#xA;&lt;li&gt;Hamler (&lt;a href=&#34;https://tedn.life/2021/01/18/haskell-beam-hamler-ii/&#34;&gt;II&lt;/a&gt;) - All solutions for part 1 (in Hamler and Haskell)&lt;/li&gt;&#xA;&lt;li&gt;Hamler (&lt;a href=&#34;https://tedn.life/2021/02/01/haskell-beam-hamler-iii/&#34;&gt;III&lt;/a&gt;) - Making Day21 10 times faster&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;hr&gt;&#xA;&lt;p&gt;What&amp;rsquo;s at the intersection of &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;, the Erlang &lt;a href=&#34;https://en.wikipedia.org/wiki/BEAM_(Erlang_virtual_machine)&#34;&gt;Beam&lt;/a&gt;/&lt;a href=&#34;http://erlang.org/doc/system_architecture_intro/sys_arch_intro.html&#34;&gt;OTP&lt;/a&gt; and the &lt;a href=&#34;https://adventofcode.com&#34;&gt;Advent-of-Code&lt;/a&gt;?&lt;/p&gt;&#xA;&lt;p&gt;Yes, right: &lt;a href=&#34;https://www.hamler-lang.org&#34;&gt;Hamler&lt;/a&gt;!&lt;/p&gt;&#xA;&lt;p&gt;Hamler is a Haskell-like language that runs on the Erlang Beam/OTP.&lt;/p&gt;&#xA;&lt;p&gt;At Community we are big Beam/OTP fans (because we like highly-scalable and highly-available shared nothing micro-services systems). Our entire backend runs on the Beam (written in Elixir).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Code Elixir LDN 2019 - 3 languages in 3 minutes</title>
      <link>http://tedn.life/2019/08/01/code-elixir-ldn-2019-3-languages-in-3-minutes/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2019/08/01/code-elixir-ldn-2019-3-languages-in-3-minutes/</guid>
      <description>&lt;p&gt;Last week I was in London attending &lt;a href=&#34;https://codesync.global/conferences/code-elixir-ldn-2019/&#34;&gt;Code Elixir LDN 2019&lt;/a&gt; delivering a lightening talk on &lt;a href=&#34;https://github.com/rolandtritsch/elixir-ldn-2019&#34;&gt;3 languages in 3 minutes&lt;/a&gt; &amp;hellip;&lt;/p&gt;&#xA;&lt;iframe style=&#34;display:block; margin-top: 5px; margin-bottom: 10px; margin-left: auto; margin-right: auto; border:3px solid black;&#34; width=&#34;560&#34; height=&#34;315&#34; src=&#34;https://www.youtube.com/embed/LoTHaKhHcWY&#34; frameborder=&#34;10&#34; allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture&#34; allowfullscreen&gt;&lt;/iframe&gt;&#xA;&lt;p&gt;This was my first Elixir conference. We had about 100 people there. The conference was very well organized. From what I can see London is one the Elixir hotspots in Europe.&lt;/p&gt;&#xA;&lt;p&gt;All of the talks where good, but a couple of them where of even better value to me personally (because I am the newbie) &amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code 2017 ... Revolutions!!!</title>
      <link>http://tedn.life/2018/08/11/advent-of-code-2017-...-revolutions/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2018/08/11/advent-of-code-2017-...-revolutions/</guid>
      <description>&lt;p&gt;Let&amp;rsquo;s talk about the Advent of Code &amp;hellip; &lt;a href=&#34;http://www.tritsch.org/2018/05/24/aoc-reloaded.html&#34;&gt;again&lt;/a&gt;!!!&lt;/p&gt;&#xA;&lt;p&gt;Last time we talked about a/the &lt;a href=&#34;https://github.com/rolandtritsch/scala-aoc-2017&#34;&gt;Scala&lt;/a&gt; implementation.&lt;/p&gt;&#xA;&lt;p&gt;This time around I figured that I need to understand what the hype about Kotlin is all about and decided to port my Scala solutions to &lt;a href=&#34;https://github.com/rolandtritsch/kotlin-aoc-2017&#34;&gt;Kotlin&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;There is a separate blog post on what I think about &lt;a href=&#34;http://www.tritsch.org/2018/08/11/kotlin-the-better-java.html&#34;&gt;Kotlin&lt;/a&gt;, but overall it was a positive experience. I like Kotlin (but would not suggest/recommend it as a replacement for Scala).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kotlin ... the better Java?</title>
      <link>http://tedn.life/2018/08/11/kotlin-...-the-better-java/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2018/08/11/kotlin-...-the-better-java/</guid>
      <description>&lt;p&gt;Everybody is talking about Kotlin. Me too!!!&lt;/p&gt;&#xA;&lt;p&gt;Obviously the question is: Is Kotlin the next better thing?&lt;/p&gt;&#xA;&lt;p&gt;Is Kotlin going to replace Java? Is Kotlin going to replace Scala? Is Kotlin the next better language that will make Software Engineers (much) more productive?&lt;/p&gt;&#xA;&lt;p&gt;To find out I ported my &lt;a href=&#34;https://github.com/rolandtritsch/scala-aoc-2017&#34;&gt;Scala&lt;/a&gt; &lt;a href=&#34;https://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; solutions to &lt;a href=&#34;https://github.com/rolandtritsch/kotlin-aoc-2017&#34;&gt;Kotlin&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;My main take aways are &amp;hellip;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;if you know Java, learning Kotlin will be easier and faster than learning Scala&lt;/li&gt;&#xA;&lt;li&gt;Kotlin is without a doubt &amp;ldquo;the better Java&amp;rdquo;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;it compiles fast&lt;/li&gt;&#xA;&lt;li&gt;it runs fast&lt;/li&gt;&#xA;&lt;li&gt;it has very good tooling/IDE support (namely (obviously) the support in &lt;a href=&#34;https://kotlinlang.org/docs/tutorials/getting-started.html&#34;&gt;Intellij&lt;/a&gt; is first-class)&lt;/li&gt;&#xA;&lt;li&gt;it runs on Android&lt;/li&gt;&#xA;&lt;li&gt;hell &amp;hellip; it even runs on &lt;a href=&#34;https://hadihariri.com/2017/04/09/kotlin-on-raspberry-pi&#34;&gt;Raspberry Pi&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;with &lt;a href=&#34;https://arrow-kt.io&#34;&gt;Arrows&lt;/a&gt; it has a very nice (pure) functional programming library&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;if you know Scala, learning Kotlin will be even easier, but you will also feel that you are not gaining anything or even that you are loosing some capabilities that are &lt;a href=&#34;https://dzone.com/articles/kotlin-vs-scala-vs-java&#34;&gt;valuable&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Sooooo &amp;hellip; my exec summary is &amp;hellip;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Advent of Code 2017 ... Reloaded!!!</title>
      <link>http://tedn.life/2018/05/24/advent-of-code-2017-...-reloaded/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2018/05/24/advent-of-code-2017-...-reloaded/</guid>
      <description>&lt;p&gt;OK &amp;hellip; it took me a while, but &amp;hellip; hopefully it was worth it!!!&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://4.bp.blogspot.com/-_Ytk8mebsng/TvN56L3aHoI/AAAAAAAAHjc/lPKJfTklQAA/s1600/37.jpg&#34; alt=&#34;Matrix Reloaded&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;Last year at christmas I did the &lt;a href=&#34;https://adventofcode.com&#34;&gt;Advent of Code&lt;/a&gt; and &amp;hellip; really liked it!!!&lt;/p&gt;&#xA;&lt;p&gt;If you do not know it, it is a series (25 of them) of code puzzles that need to be solved to unlock a/the christmas tree (every day (between Dec. 1st and Dec. 25th) a new/the next puzzle becomes available).&lt;/p&gt;</description>
    </item>
    <item>
      <title>Category Theory for Programmers ... Reviewing THE course!</title>
      <link>http://tedn.life/2018/04/03/category-theory-for-programmers-...-reviewing-the-course/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2018/04/03/category-theory-for-programmers-...-reviewing-the-course/</guid>
      <description>&lt;p&gt;A couple of weeks ago &lt;a href=&#34;https://www.linkedin.com/in/angelcervera&#34;&gt;Angel&lt;/a&gt; pointed me to a very nice lecture: &lt;a href=&#34;https://www.youtube.com/playlist?list=PLbgaMIhjbmEnaH_LTkxLI7FMa2HsnawM_&#34;&gt;Category Theory for Programmers&lt;/a&gt; (from/by &lt;a href=&#34;https://bartoszmilewski.com/about&#34;&gt;Bartosz Milewski&lt;/a&gt;).&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/in/drbartosz&#34;&gt;Bartosz Milewski&lt;/a&gt; is a physisist, a &lt;a href=&#34;https://www.youtube.com/watch?v=HnnyiNKpWR8&#34;&gt;philosopher&lt;/a&gt; (on computer science and life in general :)) and runs his own company to make the world a better place by means of Category Theory and Haskell :).&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;http://tedn.life/images/2018-04-03-category-theory/monads.png&#34; alt=&#34;Monads&#34;&gt;&lt;/p&gt;&#xA;&lt;p&gt;The course is long &amp;hellip;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Category Theory 1.1: Motivation and Philosophy&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 1.2: What is a category?&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 2.1: Functions, epimorphisms&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 2.2: Monomorphisms, simple types&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 3.1: Examples of categories, orders, monoids&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 3.2: Kleisli category&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 4.1: Terminal and initial objects&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 4.2: Products&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 5.1: Coproducts, sum types&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 5.2: Algebraic data types&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 6.1: Functors&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 6.2: Functors in programming&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 7.1: Functoriality, bifunctors&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 7.2: Monoidal Categories, Functoriality of ADTs, Profunctors&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 8.1: Function objects, exponentials&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 8.2: Type algebra, Curry-Howard-Lambek isomorphism&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 9.1: Natural transformations&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 9.2: bicategories&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 10.1: Monads&lt;/li&gt;&#xA;&lt;li&gt;Category Theory 10.2: Monoid in the category of endofunctors&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;&amp;hellip; and every lecture is 45-60 mins, means you need to invest 20 hours (and it helps, if you invest 20 hours before that to learn some &lt;a href=&#34;http://haskellbook.com&#34;&gt;Haskell&lt;/a&gt;).&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to make your options in the future suck less!!!</title>
      <link>http://tedn.life/2017/06/26/how-to-make-your-options-in-the-future-suck-less/</link>
      <pubDate>Mon, 26 Jun 2017 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2017/06/26/how-to-make-your-options-in-the-future-suck-less/</guid>
      <description>&lt;p&gt;If you are here for some advise on how to invest your money (using options), you are in the wrong place.&lt;/p&gt;&#xA;&lt;p&gt;This is about how to use Scala Options in Scala Futures!!!&lt;/p&gt;&#xA;&lt;p&gt;Erik Bakker delivered an excellent &lt;a href=&#34;https://www.youtube.com/watch?v=hGMndafDcc8&#34;&gt;talk&lt;/a&gt; on this topic in 2015 at the ScalaDays in Amsterdam.&lt;/p&gt;&#xA;&lt;p&gt;On Sunday morning I was on Dad-duty driving Alexandros to a paint-ball battle and ended up in coffee shop with three hours of zone time. I decided to spend it on implementing &lt;a href=&#34;https://github.com/rolandtritsch/scala-unsuck&#34;&gt;some code&lt;/a&gt; so that I/we can play around with it.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Functional Programming on iOS and Android - Making the impossible ... possible?!?!</title>
      <link>http://tedn.life/2015/04/25/functional-programming-on-ios-and-android-making-the-impossible-...-possible/</link>
      <pubDate>Sat, 25 Apr 2015 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2015/04/25/functional-programming-on-ios-and-android-making-the-impossible-...-possible/</guid>
      <description>&lt;a href=&#34;http://4.bp.blogspot.com/-VgrDx1dkSHY/VTtJ51twOJI/AAAAAAAAFIo/2GAYU5MWMUE/s1600/Screen%2BShot%2B2015-04-25%2Bat%2B06.59.34.png&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://4.bp.blogspot.com/-VgrDx1dkSHY/VTtJ51twOJI/AAAAAAAAFIo/2GAYU5MWMUE/s1600/Screen%2BShot%2B2015-04-25%2Bat%2B06.59.34.png&#34; height=&#34;320&#34; width=&#34;193&#34; /&gt;&lt;/a&gt;Beginning of the year we had one of our Microsoft Senior Architects from the GDC (Global Delivery Center) in India with us. Over a couple of pints the obvious happened: I sparked his interest in functional programming and he sparked &lt;a href=&#34;https://github.com/rolandtritsch/fsharp-josephus-problem&#34; target=&#34;_blank&#34;&gt;my interest in F#&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;First I made &lt;a href=&#34;http://fsharp.org/use/mac/&#34; target=&#34;_blank&#34;&gt;Mono&lt;/a&gt;&amp;nbsp;and &lt;a href=&#34;http://fsharp.github.io/fsharpbinding&#34; target=&#34;_blank&#34;&gt;Emacs&lt;/a&gt; work, but then I started to use &lt;a href=&#34;http://xamarin.com/&#34; target=&#34;_blank&#34;&gt;Xamarin&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;Not so much, because I needed a better IDE (Emacs rules :)), but because I got interested in the claim that you can use &lt;a href=&#34;http://fsharp.org/guides/mac-linux-cross-platform/&#34; target=&#34;_blank&#34;&gt;Xamarin to do Android and iOS cross-platform development with #F&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;If you need to develop a mobile application (and these days ... who doesn&#39;t :)) your choices are full of compromises. There might be cases, when you can get away with supporting only Android or iOS, but in general you need both. To support both you can ...&#xA;&#xA;&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;ol&gt;&lt;li style=&#34;text-align: left;&#34;&gt;Develop two native apps. One in Objective-C and one in Java. This will give you the best user experience. Both apps will be able to take full advantage of the capabilities of the respective device, platform and APIs. BUT ... it is very expensive (two separate teams, two separate skill-sets, programming languages, tool-chains (source code control, ...), ...). This can become a night-mare. Quickly!!! Not even talking about the challenge to keep both versions in sync to ensure that the entire user community gets the same user experience (just imagine you are telling a friend about this cool app (on your iPhone) and he/she installs it (on Android) and it is sh... You will probably not tell anybody else about it (not even the iPhone users), because you are afraid to ruin your reputation).&lt;/li&gt;&lt;li style=&#34;text-align: left;&#34;&gt;Use the browser. Safari on iOS and the browser on Android share the same rendering engine: WebKit. Means you can get a pretty good cross-platform experience by implementing a kick-ass web-app. There are a couple of very advanced HTML5, CSS, JavaScript based solutions available that can make you live easier (e.g. &lt;a href=&#34;https://cordova.apache.org/&#34; target=&#34;_blank&#34;&gt;Apache Cordova&lt;/a&gt;/&lt;a href=&#34;http://phonegap.com/&#34; target=&#34;_blank&#34;&gt;PhoneGap&lt;/a&gt;, &lt;a href=&#34;http://www.feedhenry.com/&#34; target=&#34;_blank&#34;&gt;FeedHenry&lt;/a&gt;, ...).&amp;nbsp;BUT ... when you want access to some more sophisticated APIs (e.g. GPS, Sensors (Accelerators, ...), Bluetooth ... (because as we all know ... &lt;a href=&#34;https://www.youtube.com/watch?v=61a0qHFcQE4&#34; target=&#34;_blank&#34;&gt;everything is better with Bluetooth&lt;/a&gt; :))) you can get stuck and you might end up needing to compromise the user experience.&lt;/li&gt;&lt;li style=&#34;text-align: left;&#34;&gt;Use a cross-compile platform. Means you write the app once (in a given language) and the iOS and Android app get build from that code base. Two examples are Xamarin (using C# (and F#)) or &lt;a href=&#34;http://robovm.com/&#34; target=&#34;_blank&#34;&gt;RoboVM&lt;/a&gt; (using Java (and Scala)).&amp;nbsp;&lt;/li&gt;&lt;/ol&gt;&lt;br /&gt;&lt;div&gt;I am currently taking a look at Option 3 (using Xamarin and C#). My initial exec summary is ...&lt;/div&gt;&lt;div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://2.bp.blogspot.com/-KwpUxIXemRQ/VTtJbuUME7I/AAAAAAAAFIg/EBGoICkClpc/s1600/Screen%2BShot%2B2015-04-25%2Bat%2B06.30.54.png&#34; imageanchor=&#34;1&#34; style=&#34;clear: right; float: right; margin-bottom: 1em; margin-left: 1em;&#34;&gt;&lt;img border=&#34;0&#34; src=&#34;http://2.bp.blogspot.com/-KwpUxIXemRQ/VTtJbuUME7I/AAAAAAAAFIg/EBGoICkClpc/s1600/Screen%2BShot%2B2015-04-25%2Bat%2B06.30.54.png&#34; height=&#34;320&#34; width=&#34;205&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&#34;https://github.com/rolandtritsch/csharp-tasky&#34; target=&#34;_blank&#34;&gt;It works!!!&lt;/a&gt;&lt;/li&gt;&lt;li&gt;The IDE is stable enough to get work done (but has some bugs)&lt;/li&gt;&lt;li&gt;You get a lot of benefit out of using one development tool-chain (one IDE, one source-code management solution, one testing framework) and one programming language (it is much easier (and less expensive) for the team to solve problems, because they share the same skills and knowledge and can help each other)&lt;/li&gt;&lt;li&gt;The Model (as in &lt;a href=&#34;http://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller&#34; target=&#34;_blank&#34;&gt;MVC&lt;/a&gt;) can be shared between the two platforms. The Viewer/Controller code is still platform-specific. On one hand it will allow you to create the best user experience possible. On the other hand it will increase the cost to develop and maintain the app(s).&lt;/li&gt;&lt;/ul&gt;&lt;div&gt;Next step is to make Rachel&#39;s F#&amp;nbsp;&lt;a href=&#34;https://vimeo.com/97516216&#34; target=&#34;_blank&#34;&gt;Minesweeper&lt;/a&gt; work on iOS and Android. I am not saying that F# is better than Scala (for me personally it probably isn&#39;t), but getting a development environment up and running that would allow me to develop mobile apps using a functional programming language for iOS and Android sounds appealing.&lt;/div&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Scala on Android - Gradle, Ensime and the Android UI samples</title>
      <link>http://tedn.life/2015/01/27/scala-on-android-gradle-ensime-and-the-android-ui-samples/</link>
      <pubDate>Tue, 27 Jan 2015 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2015/01/27/scala-on-android-gradle-ensime-and-the-android-ui-samples/</guid>
      <description>Besides &lt;a href=&#34;http://blog.tritsch.org/2014/12/x-mas-project-1-pebble-hello-world-20.html&#34; target=&#34;_blank&#34;&gt;getting my first companion app done for my Pebble&lt;/a&gt;, I also spend some time on X-Mas to start porting &lt;a href=&#34;https://developer.android.com/samples/ui.html&#34; target=&#34;_blank&#34;&gt;the Android UI samples&lt;/a&gt; to &lt;a href=&#34;https://github.com/rolandtritsch/scala-android-ui-samples.git&#34; target=&#34;_blank&#34;&gt;Scala&lt;/a&gt;.&#xA;&#xA;&lt;br /&gt;&lt;br /&gt;The samples obviously use gradle. I normally use sbt to build my apps, but this time I decided to stick with gradle, because I wanted to make it easy for people to consume the code (and embracing a new build system might be too big of a step as a first step). It also gave me an opportunity to checkout the &lt;a href=&#34;https://github.com/saturday06/gradle-android-scala-plugin&#34;&gt;&lt;span id=&#34;goog_1801727830&#34;&gt;&lt;/span&gt;gradle-android-scala-plugin&lt;span id=&#34;goog_1801727831&#34;&gt;&lt;/span&gt;&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;I also enhanced the &lt;a href=&#34;https://github.com/rolandtritsch/gradle-ensime&#34; target=&#34;_blank&#34;&gt;gradle-ensime&lt;/a&gt;&amp;nbsp;plugin to make sure it generates a valid .ensime file for Android projects.&lt;br /&gt;&lt;br /&gt;Now I have &lt;a href=&#34;https://github.com/rolandtritsch/scala-android-ui-samples.git&#34; target=&#34;_blank&#34;&gt;a working structure&lt;/a&gt; in place. If you want to help with the porting effort, please create an issue to let everybody know that you want to port on of the samples, fork the repo and send me a pull-request to get your port into the repo.</description>
    </item>
    <item>
      <title>Scala on Android - A start ...</title>
      <link>http://tedn.life/2014/01/28/scala-on-android-a-start-.../</link>
      <pubDate>Tue, 28 Jan 2014 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2014/01/28/scala-on-android-a-start-.../</guid>
      <description>I don&#39;t know what your experience is, but ...&lt;br /&gt;&lt;br /&gt;... in my case, when I look at a new technology, one of the main (or first) hurdles is, that it takes some time to get the initial development environment up and running.&lt;br /&gt;&lt;br /&gt;This is why I figured it probably makes sense to polish and publish something that I did a couple of month ago: &lt;a href=&#34;https://github.com/rolandtritsch/scala-android-first/releases/tag/v1.2-basic&#34; target=&#34;_blank&#34;&gt;Porting the basic Android tutorial to Scala&lt;/a&gt;.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;object class=&#34;BLOGGER-youtube-video&#34; classid=&#34;clsid:D27CDB6E-AE6D-11cf-96B8-444553540000&#34; codebase=&#34;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&#34; data-thumbnail-src=&#34;https://ytimg.googleusercontent.com/vi/Bzb_yGJYlHk/0.jpg&#34; height=&#34;266&#34; width=&#34;320&#34;&gt;&lt;param name=&#34;movie&#34; value=&#34;https://www.youtube.com/v/Bzb_yGJYlHk?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&#34; /&gt;&lt;param name=&#34;bgcolor&#34; value=&#34;#FFFFFF&#34; /&gt;&lt;param name=&#34;allowFullScreen&#34; value=&#34;true&#34; /&gt;&lt;embed width=&#34;320&#34; height=&#34;266&#34;  src=&#34;https://www.youtube.com/v/Bzb_yGJYlHk?version=3&amp;f=user_uploads&amp;c=google-webdrive-0&amp;app=youtube_gdata&#34; type=&#34;application/x-shockwave-flash&#34; allowfullscreen=&#34;true&#34;&gt;&lt;/embed&gt;&lt;/object&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;Enjoy :) ...</description>
    </item>
    <item>
      <title>To become or not to become ... a Sunday with Scala and Actors</title>
      <link>http://tedn.life/2013/10/07/to-become-or-not-to-become-...-a-sunday-with-scala-and-actors/</link>
      <pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2013/10/07/to-become-or-not-to-become-...-a-sunday-with-scala-and-actors/</guid>
      <description>&lt;br /&gt;It is Sunday, the sun is shining ... in Ireland!!! What do you do? Right: You get your laptop and finally start to get your head around the actor model in Scala.&lt;br /&gt;&lt;br /&gt;In my case I tried to come up with a &lt;a href=&#34;https://github.com/rolandtritsch/scala-dining-philosophers&#34; target=&#34;_blank&#34;&gt;simulation&lt;/a&gt; for the &lt;a href=&#34;http://en.wikipedia.org/wiki/Dining_philosophers_problem&#34; target=&#34;_blank&#34;&gt;Dining Philosophers Problem&lt;/a&gt; (DPP). There are &lt;a href=&#34;https://github.com/akka/akka/blob/master/akka-samples/akka-sample-fsm/src/main/scala/DiningHakkersOnBecome.scala&#34; target=&#34;_blank&#34;&gt;implementations&lt;/a&gt; available, but I consolidated them and renamed the states and transitions to make it more obvious what is going on and used &lt;a href=&#34;http://plantuml.sourceforge.net/&#34; target=&#34;_blank&#34;&gt;plantUML&lt;/a&gt; to come up with State Transition Diagrams (STDs) that show what is going on.&lt;br /&gt;&lt;br /&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;/div&gt;&lt;div class=&#34;separator&#34; style=&#34;clear: both; text-align: center;&#34;&gt;&lt;a href=&#34;http://3.bp.blogspot.com/-d2ckmSiOAhA/UlQhNWghElI/AAAAAAAAAIc/D_mfNKQy80M/s1600/Philosopher.png&#34; imageanchor=&#34;1&#34; style=&#34;margin-left: 1em; margin-right: 1em;&#34;&gt;&lt;img border=&#34;0&#34; height=&#34;311&#34; src=&#34;http://3.bp.blogspot.com/-d2ckmSiOAhA/UlQhNWghElI/AAAAAAAAAIc/D_mfNKQy80M/s400/Philosopher.png&#34; width=&#34;400&#34; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;The model detects potential deadlocks and asks the philosopher to put down all forks, before trying again.&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;The epiphany of the day was that you need to use become() to model the states :).</description>
    </item>
    <item>
      <title>Teaching Scala @ TCD ... back to the roots</title>
      <link>http://tedn.life/2012/11/10/teaching-scala-@-tcd-...-back-to-the-roots/</link>
      <pubDate>Sat, 10 Nov 2012 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2012/11/10/teaching-scala-@-tcd-...-back-to-the-roots/</guid>
      <description>20 years ago I used to teach object-oriented programming (based on &lt;a href=&#34;http://en.wikipedia.org/wiki/Eiffel_(programming_language)&#34; target=&#34;_blank&#34;&gt;Eiffel&lt;/a&gt;) at &lt;a href=&#34;https://www.fbi.h-da.de/willkommen-beim-fachbereich-informatik.html&#34; target=&#34;_blank&#34;&gt;my old university&lt;/a&gt; in Germany.&lt;br /&gt;&lt;br /&gt;This week I got the chance to experience a deja-vu, because earlier this year I did run into &lt;a href=&#34;http://www.cs.tcd.ie/Glenn.Strong/&#34; target=&#34;_blank&#34;&gt;Glenn Strong&lt;/a&gt; who is teaching &lt;a href=&#34;https://www.scss.tcd.ie/disciplines/software_systems/fmg/fmg_web/courses/CS3016/&#34; target=&#34;_blank&#34;&gt;Functional Programming in TCD in Dublin&lt;/a&gt; and we started to develop the idea that it would be useful to add a &lt;a href=&#34;http://www.scala-lang.org/&#34; target=&#34;_blank&#34;&gt;Scala&lt;/a&gt; module to his &lt;a href=&#34;http://www.haskell.org/haskellwiki/Haskell&#34; target=&#34;_blank&#34;&gt;Haskell&lt;/a&gt; based lecture.&lt;br /&gt;&lt;br /&gt;The main idea was that the module could complement the lecture by exposing the students to a second functional programming language and at the same time &lt;a href=&#34;https://docs.google.com/a/tritsch.org/presentation/d/18jMvXmy3M9URVe0B-rlGxZ_rdnzV7OXKMfNDuu9rM6Q/edit#slide=id.p&#34; target=&#34;_blank&#34;&gt;highlight&lt;/a&gt; why at the current point in time Scala is the programming language of choice when large corporations decide to adopt a more functional programming paradigm (&lt;a href=&#34;http://www.gilt.com/&#34; target=&#34;_blank&#34;&gt;Gilt&lt;/a&gt; being one of them).&lt;br /&gt;&lt;br /&gt;In that context the module focused mainly on how well Scala co-exists with Java. The two real-world scenarios that got implemented in the lab exercises was to rewrite a piece of Java in Scala and to integrate Scala with existing Java source code. Feel free to &lt;a href=&#34;https://github.com/rolandtritsch/scala-tcd-funcprog&#34; target=&#34;_blank&#34;&gt;clone the repo&lt;/a&gt; and play with it yourself. My stuff is in the roland.tritsch folder.</description>
    </item>
    <item>
      <title>A starting point for ... Apache Felix, OSGi, Scala, Sbt</title>
      <link>http://tedn.life/2012/09/16/a-starting-point-for-...-apache-felix-osgi-scala-sbt/</link>
      <pubDate>Sun, 16 Sep 2012 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2012/09/16/a-starting-point-for-...-apache-felix-osgi-scala-sbt/</guid>
      <description>It is not a secret ...&lt;br /&gt;&lt;br /&gt;I like &lt;a href=&#34;http://blog.tritsch.org/2010/04/managing-complexity-with-osgi-in-and.html&#34; target=&#34;_blank&#34;&gt;OSGi&lt;/a&gt; and Scala ... and therefore it was only a question of time until I started to wonder, if there is anything that would prevent me from using OSGi from/with Scala. The short answer and the good news is ... nothing.&lt;br /&gt;&lt;br /&gt;I just &lt;a href=&#34;https://github.com/rolandtritsch/apache-felix-scala-tutorial&#34; target=&#34;_blank&#34;&gt;checked in&lt;/a&gt; my port of the original &lt;a href=&#34;http://felix.apache.org/site/apache-felix-osgi-tutorial.html&#34; target=&#34;_blank&#34;&gt;Apache Felix Tutorial&lt;/a&gt; to Scala. As mentioned in the README I do not want to claim that this boilerplate code, but it is a working development environment that you can use as a starting point for your own experiments.</description>
    </item>
  </channel>
</rss>
