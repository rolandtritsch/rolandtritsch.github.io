<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on tedn.life</title>
    <link>http://tedn.life/tags/haskell/</link>
    <description>Recent content in Haskell on tedn.life</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 06 Apr 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://tedn.life/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>I love Haskell</title>
      <link>http://tedn.life/2019/04/06/i-love-haskell/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://tedn.life/2019/04/06/i-love-haskell/</guid>
      <description>Over the last 2 years I did a fair bit of Haskell (after doing a fairer bit of Scala for 8 years).
And I love Haskell.
Don&amp;rsquo;t get me wrong: If you are tied to the JVM eco-system (and who is not these days), my opinion is that Scala is your best option to do functional programming on the JVM.
At the same time writting code in Haskell feels very natural to me.</description>
    </item>
    
    <item>
      <title>Advent of Code ... Final cut (... and First cut :))</title>
      <link>http://tedn.life/2018/11/30/advent-of-code-...-final-cut-...-and-first-cut/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      
      <guid>http://tedn.life/2018/11/30/advent-of-code-...-final-cut-...-and-first-cut/</guid>
      <description>Today Advent of Code 2018 started again (at 05:00am (GMT))!!!
And &amp;hellip;
&amp;hellip; just in time &amp;hellip;
&amp;hellip; today I am also wrapping up Advent of Code 2017!!!
My first implementation was (obviously) in Scala.
And that one alone was interesting, because I also used ScalaCheck for property-based testing and ScalaMeter to implement performance tests for all solutions.
I then made the Scala code cross-compile with ScalaNative.
At the time I was also learning Kotlin and spend some cycles to port the code to Kotlin.</description>
    </item>
    
    <item>
      <title>Learn you a ... Haskell!</title>
      <link>http://tedn.life/2018/08/11/learn-you-a-...-haskell/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      
      <guid>http://tedn.life/2018/08/11/learn-you-a-...-haskell/</guid>
      <description>In the last 6 month I have started to wonder.
First of all &amp;hellip; I am convinced that using the concepts of functional programming will give you better results (more maintainable/changeable/extendable code). Not embracing functional programming will (sooner or later) put you (and the organisation you are leading) at a competitive disadvantage (compared to those who do).
In that context I have put some time into learning more Scala (the learning never stops :)) and have also looked at Kotlin.</description>
    </item>
    
    <item>
      <title>Category Theory for Programmers ... Reviewing THE course!</title>
      <link>http://tedn.life/2018/04/03/category-theory-for-programmers-...-reviewing-the-course/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://tedn.life/2018/04/03/category-theory-for-programmers-...-reviewing-the-course/</guid>
      <description>A couple of weeks ago Angel pointed me to a very nice lecture: Category Theory for Programmers (from/by Bartosz Milewski).
Bartosz Milewski is a physisist, a philosopher (on computer science and life in general :)) and runs his own company to make the world a better place by means of Category Theory and Haskell :).
The course is long &amp;hellip;
 Category Theory 1.1: Motivation and Philosophy Category Theory 1.2: What is a category?</description>
    </item>
    
  </channel>
</rss>