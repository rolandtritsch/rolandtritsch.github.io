<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Haskell on tedn.life</title>
    <link>http://tedn.life/tags/haskell/</link>
    <description>Recent content in Haskell on tedn.life</description>
    <generator>Hugo</generator>
    <language>en</language>
    <lastBuildDate>Wed, 02 Jun 2021 07:15:02 +0100</lastBuildDate>
    <atom:link href="http://tedn.life/tags/haskell/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Haskell &#43; Beam = Hamler (III)</title>
      <link>http://tedn.life/2021/02/01/haskell--beam-hamler-iii/</link>
      <pubDate>Mon, 01 Feb 2021 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2021/02/01/haskell--beam-hamler-iii/</guid>
      <description>Here comes part III of the Hamler blog post series &amp;hellip;&#xA;One of the observations was that for/on Day21 hamler ~6000 times slower than haskell, where in general we where able to see that it was 5-20 times slower.&#xA;Just looked into this a little bit and there is good news and bad news. The good news is I found something.&#xA;I can make the hamer solution run 10 times faster by changing the implementation of part1 from &amp;hellip;</description>
    </item>
    <item>
      <title>Haskell &#43; Beam = Hamler (II)</title>
      <link>http://tedn.life/2021/01/18/haskell--beam-hamler-ii/</link>
      <pubDate>Mon, 18 Jan 2021 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2021/01/18/haskell--beam-hamler-ii/</guid>
      <description>Here comes part II of the Hamler blog post series &amp;hellip;&#xA;For this year&amp;rsquo;s Advent-of-Code I wanted to take a look at Hamler.&#xA;I just finished implementing all of the part-1 solutions in Hamler.&#xA;I had to skip Day 20 (the seamonster), because Hamler only supports a very small/limited number of packages, which means I would have needed to write a lot of code before I would have been able to tackle the actual problem.</description>
    </item>
    <item>
      <title>Haskell &#43; Beam = Hamler (I)</title>
      <link>http://tedn.life/2020/12/15/haskell--beam-hamler-i/</link>
      <pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2020/12/15/haskell--beam-hamler-i/</guid>
      <description>Hamler Blog Post Series &amp;hellip;&#xA;Hamler (I) - First week (this post) Hamler (II) - All solutions for part 1 (in Hamler and Haskell) Hamler (III) - Making Day21 10 times faster What&amp;rsquo;s at the intersection of Haskell, the Erlang Beam/OTP and the Advent-of-Code?&#xA;Yes, right: Hamler!&#xA;Hamler is a Haskell-like language that runs on the Erlang Beam/OTP.&#xA;At Community we are big Beam/OTP fans (because we like highly-scalable and highly-available shared nothing micro-services systems).</description>
    </item>
    <item>
      <title>Code Elixir LDN 2019 - 3 languages in 3 minutes</title>
      <link>http://tedn.life/2019/08/01/code-elixir-ldn-2019-3-languages-in-3-minutes/</link>
      <pubDate>Thu, 01 Aug 2019 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2019/08/01/code-elixir-ldn-2019-3-languages-in-3-minutes/</guid>
      <description>Last week I was in London attending Code Elixir LDN 2019 delivering a lightening talk on 3 languages in 3 minutes &amp;hellip;&#xA;This was my first Elixir conference. We had about 100 people there. The conference was very well organized. From what I can see London is one the Elixir hotspots in Europe.&#xA;All of the talks where good, but a couple of them where of even better value to me personally (because I am the newbie) &amp;hellip;</description>
    </item>
    <item>
      <title>I love Haskell</title>
      <link>http://tedn.life/2019/04/06/i-love-haskell/</link>
      <pubDate>Sat, 06 Apr 2019 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2019/04/06/i-love-haskell/</guid>
      <description>Over the last 2 years I did a fair bit of Haskell (after doing a fairer bit of Scala for 8 years).&#xA;And I love Haskell.&#xA;Don&amp;rsquo;t get me wrong: If you are tied to the JVM eco-system (and who is not these days), my opinion is that Scala is your best option to do functional programming on the JVM.&#xA;At the same time writting code in Haskell feels very natural to me.</description>
    </item>
    <item>
      <title>Advent of Code ... Final cut (... and First cut :))</title>
      <link>http://tedn.life/2018/11/30/advent-of-code-...-final-cut-...-and-first-cut/</link>
      <pubDate>Fri, 30 Nov 2018 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2018/11/30/advent-of-code-...-final-cut-...-and-first-cut/</guid>
      <description>Today Advent of Code 2018 started again (at 05:00am (GMT))!!!&#xA;And &amp;hellip;&#xA;&amp;hellip; just in time &amp;hellip;&#xA;&amp;hellip; today I am also wrapping up Advent of Code 2017!!!&#xA;My first implementation was (obviously) in Scala.&#xA;And that one alone was interesting, because I also used ScalaCheck for property-based testing and ScalaMeter to implement performance tests for all solutions.&#xA;I then made the Scala code cross-compile with ScalaNative.&#xA;At the time I was also learning Kotlin and spend some cycles to port the code to Kotlin.</description>
    </item>
    <item>
      <title>Learn you a ... Haskell!</title>
      <link>http://tedn.life/2018/08/11/learn-you-a-...-haskell/</link>
      <pubDate>Sat, 11 Aug 2018 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2018/08/11/learn-you-a-...-haskell/</guid>
      <description>In the last 6 month I have started to wonder.&#xA;First of all &amp;hellip; I am convinced that using the concepts of functional programming will give you better results (more maintainable/changeable/extendable code). Not embracing functional programming will (sooner or later) put you (and the organisation you are leading) at a competitive disadvantage (compared to those who do).&#xA;In that context I have put some time into learning more Scala (the learning never stops :)) and have also looked at Kotlin.</description>
    </item>
    <item>
      <title>Category Theory for Programmers ... Reviewing THE course!</title>
      <link>http://tedn.life/2018/04/03/category-theory-for-programmers-...-reviewing-the-course/</link>
      <pubDate>Tue, 03 Apr 2018 00:00:00 +0000</pubDate>
      <guid>http://tedn.life/2018/04/03/category-theory-for-programmers-...-reviewing-the-course/</guid>
      <description>A couple of weeks ago Angel pointed me to a very nice lecture: Category Theory for Programmers (from/by Bartosz Milewski).&#xA;Bartosz Milewski is a physisist, a philosopher (on computer science and life in general :)) and runs his own company to make the world a better place by means of Category Theory and Haskell :).&#xA;The course is long &amp;hellip;&#xA;Category Theory 1.1: Motivation and Philosophy Category Theory 1.2: What is a category?</description>
    </item>
  </channel>
</rss>
